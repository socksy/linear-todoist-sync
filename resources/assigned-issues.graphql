query {
  viewer {
    assignedIssues(
      first: 100,
      filter: {
        and: [
          {
            or: [
              # we want all top level issues
              { parent: { null: true } },
              # for subisssues we want:
              { parent: {
                or: [
                  # issues where the parent is not assigned
                  { assignee: { null: true } },
                  # issues where the parent is assigned to someone else
                  { assignee: { isMe: { eq: false } } }
                  # all other subissues will be included as children of the top
                  # level issues, so this way we avoid dupes by including them
                  # both as sub issues and also issues
                ]
              }}
            ]
          },
          {
            # try to reduce total number of issues we're fetching, since I don't
            # wanna paginate - and we probably don't care about v. old completed
            # issues anyway. So only include `completed` if they're from the
            # current cycle or the last
            or: [
              # include non-completed issues
              { state: { type: { neq: "completed" } } },
              # include completed issues from active/previous cycles
              { and: [
                { state: { type: { eq: "completed" } } },
                { cycle: {
                  or: [
                    { isActive: { eq: true } },
                    { isPrevious: { eq: true } },
                    { isFuture: { eq: true } }
                  ]
                }}
              ]}
            ]
          }
        ]
      }
    ) {
      nodes {
        id
        title
        description
        url
        createdAt
        archivedAt
        priority
        priorityLabel
        branchName
        state {
          name
          type
        }
        cycle {
          id
          name
          startsAt
          endsAt
          isActive
          isPrevious
          isFuture
        }
        children {
          nodes {
            id
            title
            description
            url
            createdAt
            archivedAt
            priority
            priorityLabel
            branchName
            state {
              name
              type
            }
            cycle {
              id
              name
              startsAt
              endsAt
              isActive
              isPrevious
              isFuture
            }
          }
        }
      }
    }
  }
}
